[{"categories":null,"content":" Welcome to my first CTF writeup! 🎉 In this challenge, I solved a basic Web Exploitation problem involving XSS and CSRF protection. ","date":"2025-07-24","objectID":"/first-bounty-h1/:0:0","tags":null,"title":"First Bounty H1","uri":"/first-bounty-h1/"},{"categories":null,"content":"🧩 Challenge Summary Name: Simple XSS Category: Web Points: 100 Description: Can you bypass the input filter and alert the admin? ","date":"2025-07-24","objectID":"/first-bounty-h1/:1:0","tags":null,"title":"First Bounty H1","uri":"/first-bounty-h1/"},{"categories":null,"content":"🔍 Recon The web app takes user input and reflects it on the page: Welcome, \u003cspan id=\"name\"\u003eUSERNAME\u003c/span\u003e Testing with some basic payloads: \"\u003e\u003cscript\u003ealert(1)\u003c/script\u003e This was filtered — but the filter was only blacklisting \u003cscript\u003e. ","date":"2025-07-24","objectID":"/first-bounty-h1/:2:0","tags":null,"title":"First Bounty H1","uri":"/first-bounty-h1/"},{"categories":null,"content":"🚨 Exploit By using an event-based injection: \u003cimg src=x onerror=alert(1)\u003e It bypassed the blacklist and triggered the alert. ✅ ","date":"2025-07-24","objectID":"/first-bounty-h1/:3:0","tags":null,"title":"First Bounty H1","uri":"/first-bounty-h1/"},{"categories":null,"content":"🛡️ Prevention To fix this, the server should: Use proper output encoding (e.g., DOMPurify) Avoid reflecting user input into HTML without escaping Use CSP headers ","date":"2025-07-24","objectID":"/first-bounty-h1/:4:0","tags":null,"title":"First Bounty H1","uri":"/first-bounty-h1/"},{"categories":null,"content":"📝 Final Thoughts A nice beginner web challenge. XSS remains one of the most underestimated but powerful vulnerabilities. Thanks for reading! More writeups coming soon — stay tuned. ","date":"2025-07-24","objectID":"/first-bounty-h1/:5:0","tags":null,"title":"First Bounty H1","uri":"/first-bounty-h1/"}]